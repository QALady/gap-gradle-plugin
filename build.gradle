buildscript {
    repositories{
        maven {
            name "remote_repos_maven"
            url "${artifactoryUrl}/remote-repos"
        }
        ivy {
            name "remote_repos_ivy"
            layout "maven"
            url "${artifactoryUrl}/remote-repos"
        }
    }
    dependencies {
        classpath 'com.gap:gap-gradle-plugin:+'
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
    }
}

ext.majorVersion = 2
ext.minorVersion = 0

group 'com.gap'
version = "${majorVersion}.${minorVersion}.${release}.${counter}"

apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'cobertura'
apply plugin: 'gappipeline'
apply plugin: 'gap-sonar-runner'

repositories{
    add project.repositories.wm_maven_remote_repos
    add project.repositories.wm_ivy_remote_repos
    ivy {
        name 'local_watchmen_dev_local'
        layout 'maven'
        url "${artifactoryUrl}/watchmen-dev-local"
        credentials {
            username "${ivyPublishUsername}"
            password "${ivyPublishPassword}"
        }
    }
}

sourceCompatibility=JavaVersion.VERSION_1_7
targetCompatibility=JavaVersion.VERSION_1_7

apply from: 'gradle/sonarQube.gradle'

cobertura {
    coverageFormats = ['xml', 'html']
    coverageReportDir = mkdir('target/reports/coverage')
}

configurations {
    functionalTest
}

dependencies{
    compile "org.codehaus.groovy:groovy-all:2.3.10"
    compile "org.jfrog.artifactory.client:artifactory-java-client-api:0.16"
    compile "org.jfrog.artifactory.client:artifactory-java-client-services:0.16"

    functionalTest "org.codehaus.groovy:groovy-all:2.3.10"
    functionalTest "commons-logging:commons-logging:1.1.3"
    compile gradleApi()

    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.1') {
        exclude(module: 'groovy')
    }
    compile 'org.apache.httpcomponents:httpclient:4.3.1'
    compile 'com.gap:gap-cloud:+'
    compile 'org.projectlombok:lombok:1.16.+'
    compile 'net.sourceforge.cobertura:cobertura:2.0.3'
    compile ('net.saliman:gradle-cobertura-plugin:2.2.4') {
        exclude(module:'groovy-all')
    }
    compile 'org.openbakery:xcodePlugin:0.10.3-gradle1'
    compile 'org.jsoup:jsoup:1.8.2'
    compile 'commons-io:commons-io:1.3.2'

    testCompile ('junit:junit-dep:4.11') {
        exclude group:'org.hamcrest', module:'hamcrest-core'
    }
    functionalTest 'junit:junit-dep:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile ('org.mockito:mockito-core:1.9.5') {
        exclude group:'org.hamcrest', module:'hamcrest-core'
    }
    testCompile 'org.objenesis:objenesis:2.0'
    testCompile 'com.cyrusinnovation:mockito-groovy-support:1.3'
    testCompile 'com.github.tomakehurst:wiremock:1.51'
}

sourceSets {
    integrationTest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
        groovy {
            srcDir 'src/integrationTest/groovy'
        }
    }
    functionalTest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
        groovy {
            srcDir 'functionalTests/groovy'
        }
    }
}

task integrationTest(type: Test, dependsOn: 'test') {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
}

task jarFunctionalTests(type: Jar) {
    dependsOn 'compileFunctionalTestJava'
    baseName 'functionalTests'
    from sourceSets.functionalTest.output
    destinationDir buildDir
}

def runFTScript = file('functionalTests/scripts/runFunctionalTests.sh')

artifacts{
    functionalTest jarFunctionalTests
    functionalTest runFTScript
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
        showExceptions true
        showCauses true
        showStackTraces true
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

uploadArchives {
    repositories{
        add project.repositories.local_watchmen_dev_local
    }
 }

uploadFunctionalTest {
    repositories{
        add project.repositories.local_watchmen_dev_local
    }
}

//tasks.sonarRunner.dependsOn('cobertura')

task writeVersionToEC(type: Exec) {
  commandLine "ectool", "setProperty", "/projects[Watchmen Framework]/gradlePluginVersion", "$version"

  standardOutput = new ByteArrayOutputStream()

  ext.output = {
    return standardOutput.toString()
  }
}

writeVersionToEC.doLast {
  println standardOutput;
}
